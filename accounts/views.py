from django.shortcuts import render, redirect, reverse, HttpResponseRedirect
from django.contrib import messages, auth
from .forms import UserLoginForm, UserRegistrationForm, StartASub, PersonalSubform, PhotoForm, UpdateNeeds, ContactForm
from django.contrib.auth.decorators import login_required
from django.conf import settings
from django.utils import timezone
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.template.context_processors import csrf
from packages.models import Packages
from .models import UserProfile
import stripe
import arrow
import json

stripe.api_key = settings.STRIPE_SECRET_KEY

def get_index(request):
    return render(request, 'index.html')
    
def logout(request):
    auth.logout(request)
    messages.success(request, "You have successfully logged out")
    return redirect('home')
    
def login(request):
    if request.method=="POST":
        form = UserLoginForm(request.POST)
        
        
        if form.is_valid():
            user = auth.authenticate(username=form.cleaned_data['username_or_email'],
                                     password=form.cleaned_data['password'])
            
            if user is not None:
                auth.login(request, user)
                messages.error(request, "You have successfully logged in")
                
                if request.GET and request.GET['next'] !='':
                    next = request.GET['next']
                    return HttpResponseRedirect(next)
                else:
                    return redirect(profile)
                
            else:
                form.add_error(None, "Your Username or Password was not recognised")
            
            
    else:
        form = UserLoginForm()
        
        
    return render(request, "login.html", {'form': form})

def register(request):
    if request.method=="POST":
        form = UserRegistrationForm(request.POST)
        
        if form.is_valid():
            form.save()
            
            
            user = auth.authenticate(username=form.cleaned_data['username'],
                                     password=form.cleaned_data['password1'])
                                     
            if user is not None:
                auth.login(request, user)
                return redirect('home')
    else:
        form = UserRegistrationForm()

    
    return render(request, "register.html", {'form':form})
 
@login_required() 
def profile(request):
    form = PhotoForm
    updateform = UpdateNeeds
    return render(request, 'profile.html', {'form':form, 'updateform':updateform})
     
     
     
@login_required
def subscribe(request):
    if request.method == 'POST':
        form = StartASub(request.POST)
        personalform  = PersonalSubform(request.POST)
        
        if form.is_valid():
            try:
    
                customer = stripe.Customer.create(
                    email = request.user.email,
                    card = form.cleaned_data['stripe_id'],
                    plan = 'PACK_MONTH',

                    )
                    
                if customer:
                    request.user.profile.stripe_id = customer.id
                    request.user.profile.subscription_end = arrow.now().replace(weeks=+4).datetime
                    request.user.save()
                    
            except stripe.error.CardError:
                messages.error(request, "Sorry. Your card was declined!")
                
            messages.success(request, "You have successfully subscribed!")
            return redirect(reverse('profile'))
        else:
            messages.error(request, "We were unable to take a payment with that card!")
                    
    
    else:
        form = StartASub
        personalform = PersonalSubform        
        
    args = {'subform': form, 'persubform':personalform, 'publishable': settings.STRIPE_PUBLISHABLE_KEY}
    args.update(csrf(request))
    return render(request, 'subscribe.html', args)


@login_required
def cancel_subscription(request):
   try:
       customer = stripe.Customer.retrieve(request.user.profile.stripe_id)
       customer.cancel_subscription(at_period_end=False)
       request.user.profile.subscription_end = timezone.now()
       request.user.profile.save()
   except (Exception):
       messages.error(request, "Please Try Again")
   return redirect('profile')
   
   
@csrf_exempt
def subscriptions_webhook(request):
    event_json = json.loads(request.body)

    # Verify the event by fetching it from Stripe

    try:
        # firstly verify this is a real event generated by Stripe.com
        # commented out for testing - uncomment when live
        # event = stripe.Event.retrieve(event_json['object']['id'])

        cust = event_json['object']['customer']
        paid = event_json['object']['paid']
        userProfile = UserProfile.objects.get(stripe_id=cust)

        if userProfile and paid:
            userProfile.subscription_end = arrow.now().replace(weeks=+4).datetime  # add 4 weeks from now
            userProfile.save()

    except (stripe.InvalidRequestError):
        return HttpResponse(status=404)

    return HttpResponse(status=200)
    
    
@login_required()
def change_photo(request, pk):
    user = request.user.objects.get(pk=pk)
    if request.method=="POST":
        form=forms.PhotoForm(request.POST,request.FILES)
        if form.is_valid():
            profile=form.save(commit=False)
            profile.user=request.user
            profile.save()
            return redirect('profile')
    else:
        form=forms.PhotoForm()
    return render(request,'profile.html', {'form':form})
    
    
def contactus(request):
    form= ContactForm
    return render (request, 'contact.html', {'form':form})
        
    
def faq(request):
    
    return render (request, 'faq.html')
    